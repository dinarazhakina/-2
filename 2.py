import logging
import time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–æ–∫-–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
students_db = {
    "–°–∞—Ä—ã–∑–∏–Ω –ò–ª—å—è": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–ñ–∞–∫–∏–Ω–∞ –î–∏–Ω–∞—Ä–∞": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–§–µ–ª—å–¥—Ç –ê–Ω–¥—Ä–µ–π": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–ù–∞—É—Ä–∑–±–∞–µ–≤–∞ –ê–ª—å–±–∏–Ω–∞": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–®–∞–±–∞–Ω–æ–≤ –†—É—Å–ª–∞–Ω": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–ì–µ—Ä–≥–µ—Ä—Ç –ê–Ω–Ω–∞": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–ú–æ—Å–∫–∞–≤—á—É–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–ù–∞–∑–∞—Ä–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–í–æ–ª—å–Ω–æ–≤ –ö–∏—Ä–∏–ª–ª": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 0, "–±–∞–ª–ª—ã": 0, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    },
    "–ó–¥–∞–Ω–Ω–∏–∫–æ–≤–∞ –ê–ª–∏–Ω–∞": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
        "–§–∏–∑–∏–∫–∞": {"–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å": 100, "–±–∞–ª–ª—ã": 100, "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ": time.time()},
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="7688345230:AAGUovjbhRHRBOy_1fpVltWymrJGcxH1Rp4")
dp = Dispatcher()


def get_student_info(student_name: str, subject: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
    if student_name not in students_db:
        return "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

    if subject:
        if subject not in students_db[student_name]:
            return "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        data = students_db[student_name][subject]
        last_update = time.strftime("%d.%m.%Y %H:%M", time.localtime(data["–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"]))
        return (
            f"üìä {student_name} | {subject}\n"
            f"‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {data['–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å']}%\n"
            f"üèÜ –ë–∞–ª–ª—ã: {data['–±–∞–ª–ª—ã']}/100\n"
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_update}"
        )
    else:
        info = f"üìö –°—Ç—É–¥–µ–Ω—Ç: {student_name}\n\n"
        for subj, data in students_db[student_name].items():
            info += f"üìñ {subj}: {data['–±–∞–ª–ª—ã']} –±–∞–ª–ª–æ–≤ ({data['–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å']}% –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏)\n"
        return info


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@dp.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
async def list_students(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    students = "\n".join(students_db.keys())
    await message.answer(f"üéì –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n{students}")


@dp.message(lambda message: message.text == "–ú–æ—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å")
async def ask_student_name(message: Message):
    """–ó–∞–ø—Ä–æ—Å –§–ò —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò —Å—Ç—É–¥–µ–Ω—Ç–∞:")


@dp.message()
async def process_student_request(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    if text in students_db:
        student_info = get_student_info(text)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                         [KeyboardButton(text=f"{text}|{subject}")]
                         for subject in students_db[text].keys()
                     ] + [[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )

        await message.answer(student_info, reply_markup=keyboard)
    elif "|" in text:
        # –ó–∞–ø—Ä–æ—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
        student_name, subject = text.split("|", 1)
        if student_name in students_db and subject in students_db[student_name]:
            await message.answer(get_student_info(student_name, subject))
        else:
            await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    elif text == "–ù–∞–∑–∞–¥":
        await cmd_start(message)
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    import asyncio

    asyncio.run(main())